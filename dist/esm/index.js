var u=class extends Error{constructor(e){super("This document is not valid!");Object.setPrototypeOf(this,u.prototype),this.obj=e}},f=class{constructor(e){function i(n){if(typeof n=="string")return n||(n="string"),{type:n,required:!0};if(Array.isArray(n))return n.length==2?{type:["string",i(n[1])],required:!0}:{type:[i(n[0])],required:!0};if(typeof n!="object")throw new Error("Unrecognised schema type!");return Object.keys(n).includes("type")&&Object.keys(n).includes("required")?(typeof n.type=="object"&&(n.type=i(n.type)),n):r(n)}function r(n){let l={};if(Array.isArray(n))throw new Error("Schema can't be an array!");if(typeof n!="object")throw new Error("Unrecognised schema type!");return Object.keys(n).forEach(o=>{l[o]=i(n[o])}),l}this.schema=r(e)}validate(e,i={}){if(typeof e!="object"||Array.isArray(e))return{valid:!1,reason:"majorBadType"};function r(o,a,t){switch(o.type){case"boolean":return typeof a!="boolean"?{valid:!1,reason:"badType",badKey:t}:!1;case"number":return typeof a!="number"?{valid:!1,reason:"badType",badKey:t}:!1;case"string":return typeof a!="string"?{valid:!1,reason:"badType",badKey:t}:o.pattern&&!o.pattern?.test(a)?{valid:!1,reason:"badType",badKey:t}:!1;case"mixed":return!1;default:return console.warn(`Unknown type for ${t}! The schema says ${o.type}`),!1}}let n="";function l(o,a){if(Object.keys(o).includes("type")&&Object.keys(o).includes("required")){let t=r(o,a,n);if(t)return t}else for(let t in o)if(typeof a=="object"&&!Array.isArray(a)&&!Object.keys(a).includes(t)){if(o[t].required&&!i.ignoreRequired)return{valid:!1,reason:"required",badKey:t};o[t].default&&!i.ignoreDefault&&(typeof o[t].default=="function"?e[t]=o[t].default():e[t]=o[t].default);continue}else if(Array.isArray(o[t].type)){if(o[t].type.length==2){if(typeof a[t]!="object"||Array.isArray(a[t]))return{valid:!1,reason:"badType",badKey:t};for(let c in a[t]){let p=l(o[t].type[1],a[t][c]);if(!p.valid)return p}}if(!Array.isArray(a[t]))return{valid:!1,reason:"badType",badKey:t};n=t,a[t].forEach(c=>{let p=l(o[t].type[0],c);if(!p.valid)return p})}else if(typeof o[t].type=="object"){let c=l(o[t].type,a[t]);if(!c.valid)return c}else{let c=r(o[t],a[t],t);if(c)return c}return{valid:!0,res:e}}return l(this.schema,e)}};import{MongoClient as m}from"mongodb";function h(d){return["dbName","location","password","user"].forEach(e=>{if(!Object.keys(d).includes(e))throw Error(`${e} is required in the options!`)}),d.dbOpts||(d.dbOpts={}),`mongodb://${encodeURI(d.user)}:${encodeURI(d.password)}@${encodeURI(d.location)}/${d.dbName}${Object.keys(d.dbOpts).length==0?"":"?"}${Object.keys(d.dbOpts).map((e,i)=>`${i==0?"":"&"}${encodeURI(`${e}=${(d.dbOpts??{})[e]}`)}`).join("")}`}var s={on:!1,models:{},opts:{}},y=class{static async connect(e,i,r){if(s.on){if(e)throw new Error(`I already have a connection to ${s.url}!`);return s.db}if(!e)throw new Error("I have nothing to connect to!");let n=typeof e=="string"?encodeURI(e):h(e),l=await m.connect(n,Object.assign({useNewUrlParser:!0,useUnifiedTopology:!0},i)),o=l.db(),a=Object.assign({},r);return s={on:!0,db:o,client:l,url:n,opts:a,models:s.models},o}static async disconnect(){s&&(await s.client?.close(),s={on:!1,client:void 0,db:void 0,url:void 0,models:s.models,opts:s.opts})}};var g=class{constructor(e,i,r,n){let l=i.validate(r);if(!l.valid&&!s.opts.noVerification)throw new u(l);this.doc=l.valid?l.res:r,this.schema=i,this.saved=!1,this.oldId="",this.methods=n;let o=setInterval(function(){s.on&&(clearInterval(o),this.collection=s.db.collection(e))},100)}async save(){!s.opts.noIdDetection&&this.saved&&this.oldId==this.doc._id&&(console.warn(`The _id ${this.doc._id} has already been saved once, overriding it with a new id...
To avoid this, use mongoSteel option { noIdDetection:true }`),delete this.doc._id);let e=await this.collection.insertOne(this.doc);if(!e.insertedId)throw Error("Not inserted");if(!s.opts.noDocsUpdate){let i=await this.collection.findOne({_id:e.insertedId});if(!i)throw Error("Weird");this.doc=i}return this.saved=!0,this.oldId=e.insertedId,this.doc}static async find(e){return await this.collection.find(e).toArray()}static async findOne(e){return await this.collection.findOne(e)}static async findOneAndDelete(e){let i=await this.collection.findOneAndDelete(e);if(!i.ok)throw new Error("findOneAndDelete returned not OK");return i.value}static async findOneAndReplace(e,i){let r=this.schema.validate(i);if(!r.valid)throw new u(r);i=r.res;let n=await this.collection.findOneAndReplace(e,i);if(!n.ok)throw new Error("findOneAndReplace returned not OK");return n.value}static async findOneAndUpdate(e,i){let r=this.schema.validate(i,{ignoreDefault:!0,ignoreRequired:!0});if(!r.valid)throw new u(r);let n=await this.collection.findOneAndUpdate(e,{$set:i});if(!n.ok)throw new Error("findOneAndUpdate returned not OK");return n.value}static async deleteMany(e){await this.collection.deleteMany(e)}};function w(d,e,i){class r extends g{constructor(o={}){super(d,e,o,i)}}let n=setInterval(function(){s.on&&(clearInterval(n),r.collection=s.db.collection(d))},100);return r.schema=e,r.methods=i,r}export{y as MongoSteel,f as Schema,w as model,h as toUrl};
