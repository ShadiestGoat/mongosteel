var u=class extends Error{constructor(e){super("This document is not valid!");Object.setPrototypeOf(this,u.prototype),this.obj=e}},f=class{constructor(e){function n(t){if(typeof t=="string")return t||="string",{type:t,required:!0};if(Array.isArray(t))return t.length==2?{type:["string",n(t[1])],required:!0}:{type:[n(t[0])],required:!0};if(typeof t!="object")throw new Error("Unrecognised schema type!");return Object.keys(t).includes("type")&&Object.keys(t).includes("required")?(typeof t.type=="object"&&(t.type=n(t.type)),t):r(t)}function r(t){let d={};if(Array.isArray(t))throw new Error("Schema can't be an array!");if(typeof t!="object")throw new Error("Unrecognised schema type!");return Object.keys(t).forEach(i=>{d[i]=n(t[i])}),d}this.schema=r(e)}validate(e,n={}){if(typeof e!="object"||Array.isArray(e))return{valid:!1,reason:"majorBadType"};function r(i,s,o){switch(i.type){case"boolean":return typeof s!="boolean"?{valid:!1,reason:"badType",badKey:o}:!1;case"number":return typeof s!="number"?{valid:!1,reason:"badType",badKey:o}:!1;case"string":return typeof s!="string"?{valid:!1,reason:"badType",badKey:o}:i.pattern&&!i.pattern?.test(s)?{valid:!1,reason:"badType",badKey:o}:!1;case"mixed":return!1;default:return!1}}let t="";function d(i,s){if(Object.keys(i).includes("type")&&Object.keys(i).includes("required")){let o=r(i,s,t);if(o)return o}else for(let o in i)if(typeof s=="object"&&!Array.isArray(s)&&!Object.keys(s).includes(o)){if(i[o].required&&!n.ignoreRequired)return{valid:!1,reason:"required",badKey:o};i[o].default&&!n.ignoreDefault&&(typeof i[o].default=="function"?e[o]=i[o].default():e[o]=i[o].default)}else if(Array.isArray(i[o].type)){if(i[o].type.length==2){if(Array.isArray(s[o]))return{valid:!1,reason:"badType",badKey:o};for(let c in s[o]){let p=d(i[o].type[1],s[o][c]);if(!p.valid)return p}}if(!Array.isArray(s[o]))return{valid:!1,reason:"badType",badKey:o};t=o,s[o].forEach(c=>{let p=d(i[o].type[0],c);if(!p.valid)return p})}else if(typeof i[o].type=="object"){let c=d(i[o].type,s[o]);if(!c.valid)return c}else{let c=r(i[o],s[o],o);if(c)return c}return{valid:!0,res:e}}return d(this.schema,e)}};import{MongoClient as w}from"mongodb";function y(a){return["dbName","location","password","user"].forEach(e=>{if(!Object.keys(a).includes(e))throw Error(`${e} is required in the options!`)}),a.dbOpts||={},encodeURI(`mongodb${/\d\d\d\.\d\d\d\.\d\d\.\d\d\d/.test(a.location)?"":"+srv"}://${a.user}:${a.password}@${a.location}/${a.dbName}${Object.keys(a.dbOpts).length==0?"":"?"}${Object.keys(a.dbOpts).map((e,n)=>`${n==0?"":"&"}${`${e}=${a.dbOpts[e]}`}`).join("")}`)}var l={on:!1,models:{},opts:{}},h=class{static async connect(e,n,r){if(l.on){if(e)throw new Error(`I already have a connection to ${l.url}!`);return l.db}if(!e)throw new Error("I have nothing to connect to!");let t=typeof e=="string"?encodeURI(e):y(e),d=await w.connect(t,Object.assign({useNewUrlParser:!0,useUnifiedTopology:!0},n)),i=d.db(),s=Object.assign({},r);return l={on:!0,db:i,client:d,url:t,opts:s,models:l.models},i}static async disconnect(){l&&(await l.client?.close(),l={on:!1,client:void 0,db:void 0,url:void 0,models:l.models,opts:l.opts})}};function m(a){let e=n=>{l.on?n(l.db.collection(a)):setTimeout(()=>e(n),100)};return new Promise(e)}var g=class{constructor(e,n,r,t){let d=n.validate(r);if(!d.valid&&!l.opts.noVerification)throw new u(d);this.doc=d.valid?d.res:r,this.schema=n,this.saved=!1,this.oldId="",this.methods=t,this.collection=m(e)}async save(){if(!l.opts.noIdDetection&&this.saved&&this.oldId==this.doc._id){let{_id:n,...r}=this.doc;this.doc=r,console.warn(`The _id ${n} has already been saved once, overriding it with a new id!`)}let e=await(await this.collection).insertOne(this.doc);if(!e.insertedId)throw Error("Not inserted");if(!l.opts.noDocsUpdate){let n=await(await this.collection).findOne({_id:e.insertedId});if(!n)throw Error("Weird");this.doc=n}return this.saved=!0,this.oldId=e.insertedId,this.doc}static async find(e){return await(await this.collection).find(e).toArray()}static async findOne(e){return await(await this.collection).findOne(e)}static async findOneAndDelete(e){let n=await(await this.collection).findOneAndDelete(e);if(!n.ok)throw new Error("findOneAndDelete returned not OK");return n.value}static async findOneAndReplace(e,n){let r=this.schema.validate(n);if(!r.valid)throw new u(r);n=r.res;let t=await(await this.collection).findOneAndReplace(e,n);if(!t.ok)throw new Error("findOneAndReplace returned not OK");return t.value}static async findOneAndUpdate(e,n){let r=this.schema.validate(n,{ignoreDefault:!0,ignoreRequired:!0});if(!r.valid)throw new u(r);let t=await(await this.collection).findOneAndUpdate(e,{$set:n});if(!t.ok)throw new Error("findOneAndUpdate returned not OK");return t.value}static async deleteMany(e){await(await this.collection).deleteMany(e)}};function O(a,e,n){class r extends g{constructor(d={}){super(a,e,d,n)}}return r.collection=m(a),r.schema=e,r.methods=n,r}export{h as MongoSteel,f as Schema,O as model,y as toUrl};
