"use strict";var __awaiter=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function c(e){try{s(o.next(e))}catch(e){r(e)}}function d(e){try{s(o.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,d)}s((o=o.apply(e,t||[])).next())}))};Object.defineProperty(exports,"__esModule",{value:!0}),exports.model=void 0;const connection_1=require("./connection"),schema_1=require("./schema");class trueModel{constructor(e,t,n,o){const i=t.validate(n);if(!i.valid&&!connection_1.mongoSteelConnection.opts.noVerification)throw new schema_1.MongoSteelValidityError(i);this.doc=i.valid?i.res:n,this.schema=t,this.saved=!1,this.oldId="",this.methods=o;const r=setInterval((function(){connection_1.mongoSteelConnection.on&&(clearInterval(r),this.collection=connection_1.mongoSteelConnection.db.collection(e))}),100)}save(){return __awaiter(this,void 0,void 0,(function*(){!connection_1.mongoSteelConnection.opts.noIdDetection&&this.saved&&this.oldId==this.doc._id&&(console.warn(`The _id ${this.doc._id} has already been saved once, overriding it with a new id...\nTo avoid this, use mongoSteel option { noIdDetection:true }`),delete this.doc._id);const e=yield this.collection.insertOne(this.doc);if(!e.insertedId)throw Error("Not inserted");if(!connection_1.mongoSteelConnection.opts.noDocsUpdate){const t=yield this.collection.findOne({_id:e.insertedId});if(!t)throw Error("Weird");this.doc=t}return this.saved=!0,this.oldId=e.insertedId,this.doc}))}static find(e){return __awaiter(this,void 0,void 0,(function*(){return yield this.collection.find(e).toArray()}))}static findOne(e){return __awaiter(this,void 0,void 0,(function*(){return yield this.collection.findOne(e)}))}static findOneAndDelete(e){return __awaiter(this,void 0,void 0,(function*(){const t=yield this.collection.findOneAndDelete(e);if(!t.ok)throw new Error("findOneAndDelete returned not OK");return t.value}))}static findOneAndReplace(e,t){return __awaiter(this,void 0,void 0,(function*(){const n=this.schema.validate(t);if(!n.valid)throw new schema_1.MongoSteelValidityError(n);t=n.res;const o=yield this.collection.findOneAndReplace(e,t);if(!o.ok)throw new Error("findOneAndReplace returned not OK");return o.value}))}static findOneAndUpdate(e,t){return __awaiter(this,void 0,void 0,(function*(){const n=this.schema.validate(t,{ignoreDefault:!0,ignoreRequired:!0});if(!n.valid)throw new schema_1.MongoSteelValidityError(n);const o=yield this.collection.findOneAndUpdate(e,{$set:t});if(!o.ok)throw new Error("findOneAndUpdate returned not OK");return o.value}))}static deleteMany(e){return __awaiter(this,void 0,void 0,(function*(){yield this.collection.deleteMany(e)}))}}function model(e,t,n){class o extends trueModel{constructor(o={}){super(e,t,o,n)}}const i=setInterval((function(){connection_1.mongoSteelConnection.on&&(clearInterval(i),o.collection=connection_1.mongoSteelConnection.db.collection(e))}),100);return o.schema=t,o.methods=n,o}exports.model=model;